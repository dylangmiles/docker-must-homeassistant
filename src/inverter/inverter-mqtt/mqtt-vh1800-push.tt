<#@ template debug="false" hostspecific="true" language="shell" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".sh" #>
#!/bin/bash

pushMQTTData () {

    MQTT_SERVER=`cat /app/mqtt.json | jq '.server' -r`
    MQTT_PORT=`cat /app/mqtt.json | jq '.port' -r`
    MQTT_TOPIC=`cat /app/mqtt.json | jq '.topic' -r`
    MQTT_DEVICENAME=`cat /app/mqtt.json | jq '.devicename' -r`
    MQTT_USERNAME=`cat /app/mqtt.json | jq '.username' -r`
    MQTT_PASSWORD=`cat /app/mqtt.json | jq '.password' -r`

    mosquitto_pub \
        -h $MQTT_SERVER \
        -p $MQTT_PORT \
        -u "$MQTT_USERNAME" \
        -P "$MQTT_PASSWORD" \
        -t "$MQTT_TOPIC/sensor/"$MQTT_DEVICENAME"_$1" \
        -m "$2"
}

INVERTER_DATA=`timeout 10 dotnet inverter.dll poll -a=false`

#####################################################################################

<#
    string sensorsPath = this.Host.ResolvePath($"..\\Ph1800.json");
    string sensorsJson = File.ReadAllText(sensorsPath);
    var sensors = JArray.Parse(sensorsJson);

    foreach(var sensor in sensors)
    {
        if (sensor.Value<bool>("Publish") == false) continue;

        WriteLine($"{sensor["Name"]}=`echo $INVERTER_DATA | jq '.{sensor["Name"]}' -r`");
        WriteLine($"[ ! -z \"${sensor["Name"]}\" ] && pushMQTTData \"{sensor["Name"]}\" \"${sensor["Name"]}\"");
        WriteLine($"");
    }
#>


# Composite

AccumulatedChargerPower=`echo $INVERTER_DATA | jq '.AccumulatedChargerPower' -r`
[ ! -z "$AccumulatedChargerPower" ] && pushMQTTData "AccumulatedChargerPower" "$AccumulatedChargerPower"

AccumulatedDischargerPower=`echo $INVERTER_DATA | jq '.AccumulatedDischargerPower' -r`
[ ! -z "$AccumulatedDischargerPower" ] && pushMQTTData "AccumulatedDischargerPower" "$AccumulatedDischargerPower"

AccumulatedBuyPower=`echo $INVERTER_DATA | jq '.AccumulatedBuyPower' -r`
[ ! -z "$AccumulatedBuyPower" ] && pushMQTTData "AccumulatedBuyPower" "$AccumulatedBuyPower"

AccumulatedSellPower=`echo $INVERTER_DATA | jq '.AccumulatedSellPower' -r`
[ ! -z "$AccumulatedSellPower" ] && pushMQTTData "AccumulatedSellPower" "$AccumulatedSellPower"

AccumulatedLoadPower=`echo $INVERTER_DATA | jq '.AccumulatedLoadPower' -r`
[ ! -z "$AccumulatedLoadPower" ] && pushMQTTData "AccumulatedLoadPower" "$AccumulatedLoadPower"

AccumulatedSelfusePower=`echo $INVERTER_DATA | jq '.AccumulatedSelfusePower' -r`
[ ! -z "$AccumulatedSelfusePower" ] && pushMQTTData "AccumulatedSelfusePower" "$AccumulatedSelfusePower"

AccumulatedPvsellPower=`echo $INVERTER_DATA | jq '.AccumulatedPvsellPower' -r`
[ ! -z "$AccumulatedPvsellPower" ] && pushMQTTData "AccumulatedPvsellPower" "$AccumulatedPvsellPower"

AccumulatedGridChargerPower=`echo $INVERTER_DATA | jq '.AccumulatedGridChargerPower' -r`
[ ! -z "AccumulatedGridChargerPower" ] && pushMQTTData "AccumulatedGridChargerPower" "$AccumulatedGridChargerPower"

AccumulatedPvPower=`echo $INVERTER_DATA | jq '.AccumulatedPvPower' -r`
[ ! -z "AccumulatedPvPower" ] && pushMQTTData "AccumulatedPvPower" "$AccumulatedPvPower"
